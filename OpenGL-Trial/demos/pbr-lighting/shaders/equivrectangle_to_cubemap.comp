#version 460 core

layout(binding = 0) uniform sampler2D HdrEquivRecMap;

layout(binding = 0, rgba16f) uniform writeonly imageCube CubeMap;

const vec2 RepTwoPiAndPi = vec2(0.1591549, 0.3183099);

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main() {

  vec2 st = gl_GlobalInvocationID.xy / vec2(imageSize(CubeMap));
    vec2 uv = 2.0 * vec2(st.x, 1.0-st.y) - vec2(1.0);

    vec3 n;
    // Sadly 'switch' doesn't seem to work, at least on NVIDIA.
    if(gl_GlobalInvocationID.z == 0)      n = vec3(1.0,  uv.y, -uv.x);
    else if(gl_GlobalInvocationID.z == 1) n = vec3(-1.0, uv.y,  uv.x);
    else if(gl_GlobalInvocationID.z == 2) n = vec3(uv.x, 1.0, -uv.y);
    else if(gl_GlobalInvocationID.z == 3) n = vec3(uv.x, -1.0, uv.y);
    else if(gl_GlobalInvocationID.z == 4) n = vec3(uv.x, uv.y, 1.0);
    else if(gl_GlobalInvocationID.z == 5) n = vec3(-uv.x, uv.y, -1.0);

  n = normalize(n);
  uv.x = atan(n.z, n.x);
  uv.y = -asin(n.y);
  uv *= RepTwoPiAndPi;
  uv += 0.5;

  vec4 color = textureLod(HdrEquivRecMap, uv, 0);

  imageStore(CubeMap, ivec3(gl_GlobalInvocationID), color);
}
